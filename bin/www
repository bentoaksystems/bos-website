#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('bos-website:server');
var http = require('http');
var https = require('https');
const env = require('../env');
const port = normalizePort(env.port || '4000');
const fs = require('fs');

let app, server;
appWaiter = setInterval(() => {
  console.log('App is set up');
  clearInterval(appWaiter);
  app = require('../app').get();
  app.set('port', port);

  /*
   * Create Http Server
   */

  if (env.isProd) {
    var options = {
      key: fs.readFileSync('/ssl/key.pem'),
      cert: fs.readFileSync('/ssl/cert.pem'),
    };
    server = https.createServer(options, app);
    http.createServer(function (req, res) {
      res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
      res.end();
    }).listen(port);
    server.listen(443);
  } else {
    server = http.createServer(app);
    server.listen(port);

  }

  /*
  * Listen on provided port, on all network interface.
  */
  server.on('error', onError);
  server.on('listening', onListening);
}, 100);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
